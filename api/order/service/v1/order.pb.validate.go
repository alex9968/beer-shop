// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/order/service/v1/order.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOrderReqMultiError, or
// nil if none found.
func (m *ListOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListOrderReqMultiError(errors)
	}
	return nil
}

// ListOrderReqMultiError is an error wrapping multiple validation errors
// returned by ListOrderReq.ValidateAll() if the designated constraints aren't met.
type ListOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderReqMultiError) AllErrors() []error { return m }

// ListOrderReqValidationError is the validation error returned by
// ListOrderReq.Validate if the designated constraints aren't met.
type ListOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderReqValidationError) ErrorName() string { return "ListOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e ListOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderReqValidationError{}

// Validate checks the field values on ListOrderReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOrderReplyMultiError,
// or nil if none found.
func (m *ListOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrderReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrderReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrderReplyValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrderReplyMultiError(errors)
	}
	return nil
}

// ListOrderReplyMultiError is an error wrapping multiple validation errors
// returned by ListOrderReply.ValidateAll() if the designated constraints
// aren't met.
type ListOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderReplyMultiError) AllErrors() []error { return m }

// ListOrderReplyValidationError is the validation error returned by
// ListOrderReply.Validate if the designated constraints aren't met.
type ListOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderReplyValidationError) ErrorName() string { return "ListOrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderReplyValidationError{}

// Validate checks the field values on CreateOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateOrderReqMultiError,
// or nil if none found.
func (m *CreateOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateOrderReqMultiError(errors)
	}
	return nil
}

// CreateOrderReqMultiError is an error wrapping multiple validation errors
// returned by CreateOrderReq.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderReqMultiError) AllErrors() []error { return m }

// CreateOrderReqValidationError is the validation error returned by
// CreateOrderReq.Validate if the designated constraints aren't met.
type CreateOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderReqValidationError) ErrorName() string { return "CreateOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderReqValidationError{}

// Validate checks the field values on CreateOrderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderReplyMultiError, or nil if none found.
func (m *CreateOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateOrderReplyMultiError(errors)
	}
	return nil
}

// CreateOrderReplyMultiError is an error wrapping multiple validation errors
// returned by CreateOrderReply.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderReplyMultiError) AllErrors() []error { return m }

// CreateOrderReplyValidationError is the validation error returned by
// CreateOrderReply.Validate if the designated constraints aren't met.
type CreateOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderReplyValidationError) ErrorName() string { return "CreateOrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderReplyValidationError{}

// Validate checks the field values on GetOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrderReqMultiError, or
// nil if none found.
func (m *GetOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOrderReqMultiError(errors)
	}
	return nil
}

// GetOrderReqMultiError is an error wrapping multiple validation errors
// returned by GetOrderReq.ValidateAll() if the designated constraints aren't met.
type GetOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReqMultiError) AllErrors() []error { return m }

// GetOrderReqValidationError is the validation error returned by
// GetOrderReq.Validate if the designated constraints aren't met.
type GetOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReqValidationError) ErrorName() string { return "GetOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReqValidationError{}

// Validate checks the field values on GetOrderReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrderReplyMultiError, or
// nil if none found.
func (m *GetOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetOrderReplyMultiError(errors)
	}
	return nil
}

// GetOrderReplyMultiError is an error wrapping multiple validation errors
// returned by GetOrderReply.ValidateAll() if the designated constraints
// aren't met.
type GetOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReplyMultiError) AllErrors() []error { return m }

// GetOrderReplyValidationError is the validation error returned by
// GetOrderReply.Validate if the designated constraints aren't met.
type GetOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReplyValidationError) ErrorName() string { return "GetOrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReplyValidationError{}

// Validate checks the field values on UpdateOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateOrderReqMultiError,
// or nil if none found.
func (m *UpdateOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	if len(errors) > 0 {
		return UpdateOrderReqMultiError(errors)
	}
	return nil
}

// UpdateOrderReqMultiError is an error wrapping multiple validation errors
// returned by UpdateOrderReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderReqMultiError) AllErrors() []error { return m }

// UpdateOrderReqValidationError is the validation error returned by
// UpdateOrderReq.Validate if the designated constraints aren't met.
type UpdateOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderReqValidationError) ErrorName() string { return "UpdateOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderReqValidationError{}

// Validate checks the field values on UpdateOrderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderReplyMultiError, or nil if none found.
func (m *UpdateOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	if len(errors) > 0 {
		return UpdateOrderReplyMultiError(errors)
	}
	return nil
}

// UpdateOrderReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateOrderReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderReplyMultiError) AllErrors() []error { return m }

// UpdateOrderReplyValidationError is the validation error returned by
// UpdateOrderReply.Validate if the designated constraints aren't met.
type UpdateOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderReplyValidationError) ErrorName() string { return "UpdateOrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderReplyValidationError{}

// Validate checks the field values on ListOrderReply_Order with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrderReply_Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderReply_Order with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrderReply_OrderMultiError, or nil if none found.
func (m *ListOrderReply_Order) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderReply_Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListOrderReply_OrderMultiError(errors)
	}
	return nil
}

// ListOrderReply_OrderMultiError is an error wrapping multiple validation
// errors returned by ListOrderReply_Order.ValidateAll() if the designated
// constraints aren't met.
type ListOrderReply_OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderReply_OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderReply_OrderMultiError) AllErrors() []error { return m }

// ListOrderReply_OrderValidationError is the validation error returned by
// ListOrderReply_Order.Validate if the designated constraints aren't met.
type ListOrderReply_OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderReply_OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderReply_OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderReply_OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderReply_OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderReply_OrderValidationError) ErrorName() string {
	return "ListOrderReply_OrderValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrderReply_OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderReply_Order.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderReply_OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderReply_OrderValidationError{}
