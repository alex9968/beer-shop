// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/catalog/service/v1/catalog.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListBeerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBeerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBeerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListBeerReqMultiError, or
// nil if none found.
func (m *ListBeerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBeerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListBeerReqMultiError(errors)
	}
	return nil
}

// ListBeerReqMultiError is an error wrapping multiple validation errors
// returned by ListBeerReq.ValidateAll() if the designated constraints aren't met.
type ListBeerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBeerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBeerReqMultiError) AllErrors() []error { return m }

// ListBeerReqValidationError is the validation error returned by
// ListBeerReq.Validate if the designated constraints aren't met.
type ListBeerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBeerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBeerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBeerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBeerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBeerReqValidationError) ErrorName() string { return "ListBeerReqValidationError" }

// Error satisfies the builtin error interface
func (e ListBeerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBeerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBeerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBeerReqValidationError{}

// Validate checks the field values on ListBeerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBeerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBeerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListBeerReplyMultiError, or
// nil if none found.
func (m *ListBeerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBeerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBeerReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBeerReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBeerReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBeerReplyMultiError(errors)
	}
	return nil
}

// ListBeerReplyMultiError is an error wrapping multiple validation errors
// returned by ListBeerReply.ValidateAll() if the designated constraints
// aren't met.
type ListBeerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBeerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBeerReplyMultiError) AllErrors() []error { return m }

// ListBeerReplyValidationError is the validation error returned by
// ListBeerReply.Validate if the designated constraints aren't met.
type ListBeerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBeerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBeerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBeerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBeerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBeerReplyValidationError) ErrorName() string { return "ListBeerReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListBeerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBeerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBeerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBeerReplyValidationError{}

// Validate checks the field values on CreateBeerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateBeerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBeerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateBeerReqMultiError, or
// nil if none found.
func (m *CreateBeerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBeerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBeerReqValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBeerReqValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBeerReqValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateBeerReqMultiError(errors)
	}
	return nil
}

// CreateBeerReqMultiError is an error wrapping multiple validation errors
// returned by CreateBeerReq.ValidateAll() if the designated constraints
// aren't met.
type CreateBeerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBeerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBeerReqMultiError) AllErrors() []error { return m }

// CreateBeerReqValidationError is the validation error returned by
// CreateBeerReq.Validate if the designated constraints aren't met.
type CreateBeerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBeerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBeerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBeerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBeerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBeerReqValidationError) ErrorName() string { return "CreateBeerReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateBeerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBeerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBeerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBeerReqValidationError{}

// Validate checks the field values on CreateBeerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBeerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBeerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBeerReplyMultiError, or nil if none found.
func (m *CreateBeerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBeerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBeerReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBeerReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBeerReplyValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateBeerReplyMultiError(errors)
	}
	return nil
}

// CreateBeerReplyMultiError is an error wrapping multiple validation errors
// returned by CreateBeerReply.ValidateAll() if the designated constraints
// aren't met.
type CreateBeerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBeerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBeerReplyMultiError) AllErrors() []error { return m }

// CreateBeerReplyValidationError is the validation error returned by
// CreateBeerReply.Validate if the designated constraints aren't met.
type CreateBeerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBeerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBeerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBeerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBeerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBeerReplyValidationError) ErrorName() string { return "CreateBeerReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateBeerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBeerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBeerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBeerReplyValidationError{}

// Validate checks the field values on GetBeerReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBeerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBeerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBeerReqMultiError, or
// nil if none found.
func (m *GetBeerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBeerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBeerReqMultiError(errors)
	}
	return nil
}

// GetBeerReqMultiError is an error wrapping multiple validation errors
// returned by GetBeerReq.ValidateAll() if the designated constraints aren't met.
type GetBeerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBeerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBeerReqMultiError) AllErrors() []error { return m }

// GetBeerReqValidationError is the validation error returned by
// GetBeerReq.Validate if the designated constraints aren't met.
type GetBeerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBeerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBeerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBeerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBeerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBeerReqValidationError) ErrorName() string { return "GetBeerReqValidationError" }

// Error satisfies the builtin error interface
func (e GetBeerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBeerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBeerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBeerReqValidationError{}

// Validate checks the field values on GetBeerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBeerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBeerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBeerReplyMultiError, or
// nil if none found.
func (m *GetBeerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBeerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBeerReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBeerReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBeerReplyValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBeerReplyMultiError(errors)
	}
	return nil
}

// GetBeerReplyMultiError is an error wrapping multiple validation errors
// returned by GetBeerReply.ValidateAll() if the designated constraints aren't met.
type GetBeerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBeerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBeerReplyMultiError) AllErrors() []error { return m }

// GetBeerReplyValidationError is the validation error returned by
// GetBeerReply.Validate if the designated constraints aren't met.
type GetBeerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBeerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBeerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBeerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBeerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBeerReplyValidationError) ErrorName() string { return "GetBeerReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetBeerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBeerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBeerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBeerReplyValidationError{}

// Validate checks the field values on UpdateBeerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateBeerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBeerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateBeerReqMultiError, or
// nil if none found.
func (m *UpdateBeerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBeerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateBeerReqValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateBeerReqValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateBeerReqValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateBeerReqMultiError(errors)
	}
	return nil
}

// UpdateBeerReqMultiError is an error wrapping multiple validation errors
// returned by UpdateBeerReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateBeerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBeerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBeerReqMultiError) AllErrors() []error { return m }

// UpdateBeerReqValidationError is the validation error returned by
// UpdateBeerReq.Validate if the designated constraints aren't met.
type UpdateBeerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBeerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBeerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBeerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBeerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBeerReqValidationError) ErrorName() string { return "UpdateBeerReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBeerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBeerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBeerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBeerReqValidationError{}

// Validate checks the field values on UpdateBeerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBeerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBeerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBeerReplyMultiError, or nil if none found.
func (m *UpdateBeerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBeerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateBeerReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateBeerReplyValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateBeerReplyValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateBeerReplyMultiError(errors)
	}
	return nil
}

// UpdateBeerReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateBeerReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateBeerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBeerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBeerReplyMultiError) AllErrors() []error { return m }

// UpdateBeerReplyValidationError is the validation error returned by
// UpdateBeerReply.Validate if the designated constraints aren't met.
type UpdateBeerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBeerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBeerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBeerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBeerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBeerReplyValidationError) ErrorName() string { return "UpdateBeerReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBeerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBeerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBeerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBeerReplyValidationError{}

// Validate checks the field values on DeleteBeerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteBeerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBeerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteBeerReqMultiError, or
// nil if none found.
func (m *DeleteBeerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBeerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBeerReqMultiError(errors)
	}
	return nil
}

// DeleteBeerReqMultiError is an error wrapping multiple validation errors
// returned by DeleteBeerReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteBeerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBeerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBeerReqMultiError) AllErrors() []error { return m }

// DeleteBeerReqValidationError is the validation error returned by
// DeleteBeerReq.Validate if the designated constraints aren't met.
type DeleteBeerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBeerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBeerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBeerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBeerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBeerReqValidationError) ErrorName() string { return "DeleteBeerReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteBeerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBeerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBeerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBeerReqValidationError{}

// Validate checks the field values on DeleteBeerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBeerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBeerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBeerReplyMultiError, or nil if none found.
func (m *DeleteBeerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBeerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBeerReplyMultiError(errors)
	}
	return nil
}

// DeleteBeerReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteBeerReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteBeerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBeerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBeerReplyMultiError) AllErrors() []error { return m }

// DeleteBeerReplyValidationError is the validation error returned by
// DeleteBeerReply.Validate if the designated constraints aren't met.
type DeleteBeerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBeerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBeerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBeerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBeerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBeerReplyValidationError) ErrorName() string { return "DeleteBeerReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteBeerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBeerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBeerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBeerReplyValidationError{}

// Validate checks the field values on ListBeerReply_Beer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBeerReply_Beer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBeerReply_Beer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBeerReply_BeerMultiError, or nil if none found.
func (m *ListBeerReply_Beer) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBeerReply_Beer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Count

	for idx, item := range m.GetImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBeerReply_BeerValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBeerReply_BeerValidationError{
						field:  fmt.Sprintf("Image[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBeerReply_BeerValidationError{
					field:  fmt.Sprintf("Image[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBeerReply_BeerMultiError(errors)
	}
	return nil
}

// ListBeerReply_BeerMultiError is an error wrapping multiple validation errors
// returned by ListBeerReply_Beer.ValidateAll() if the designated constraints
// aren't met.
type ListBeerReply_BeerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBeerReply_BeerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBeerReply_BeerMultiError) AllErrors() []error { return m }

// ListBeerReply_BeerValidationError is the validation error returned by
// ListBeerReply_Beer.Validate if the designated constraints aren't met.
type ListBeerReply_BeerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBeerReply_BeerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBeerReply_BeerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBeerReply_BeerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBeerReply_BeerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBeerReply_BeerValidationError) ErrorName() string {
	return "ListBeerReply_BeerValidationError"
}

// Error satisfies the builtin error interface
func (e ListBeerReply_BeerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBeerReply_Beer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBeerReply_BeerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBeerReply_BeerValidationError{}

// Validate checks the field values on ListBeerReply_Beer_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBeerReply_Beer_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBeerReply_Beer_Image with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBeerReply_Beer_ImageMultiError, or nil if none found.
func (m *ListBeerReply_Beer_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBeerReply_Beer_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return ListBeerReply_Beer_ImageMultiError(errors)
	}
	return nil
}

// ListBeerReply_Beer_ImageMultiError is an error wrapping multiple validation
// errors returned by ListBeerReply_Beer_Image.ValidateAll() if the designated
// constraints aren't met.
type ListBeerReply_Beer_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBeerReply_Beer_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBeerReply_Beer_ImageMultiError) AllErrors() []error { return m }

// ListBeerReply_Beer_ImageValidationError is the validation error returned by
// ListBeerReply_Beer_Image.Validate if the designated constraints aren't met.
type ListBeerReply_Beer_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBeerReply_Beer_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBeerReply_Beer_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBeerReply_Beer_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBeerReply_Beer_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBeerReply_Beer_ImageValidationError) ErrorName() string {
	return "ListBeerReply_Beer_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e ListBeerReply_Beer_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBeerReply_Beer_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBeerReply_Beer_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBeerReply_Beer_ImageValidationError{}

// Validate checks the field values on CreateBeerReq_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBeerReq_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBeerReq_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBeerReq_ImageMultiError, or nil if none found.
func (m *CreateBeerReq_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBeerReq_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return CreateBeerReq_ImageMultiError(errors)
	}
	return nil
}

// CreateBeerReq_ImageMultiError is an error wrapping multiple validation
// errors returned by CreateBeerReq_Image.ValidateAll() if the designated
// constraints aren't met.
type CreateBeerReq_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBeerReq_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBeerReq_ImageMultiError) AllErrors() []error { return m }

// CreateBeerReq_ImageValidationError is the validation error returned by
// CreateBeerReq_Image.Validate if the designated constraints aren't met.
type CreateBeerReq_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBeerReq_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBeerReq_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBeerReq_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBeerReq_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBeerReq_ImageValidationError) ErrorName() string {
	return "CreateBeerReq_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBeerReq_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBeerReq_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBeerReq_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBeerReq_ImageValidationError{}

// Validate checks the field values on CreateBeerReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBeerReply_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBeerReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBeerReply_ImageMultiError, or nil if none found.
func (m *CreateBeerReply_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBeerReply_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return CreateBeerReply_ImageMultiError(errors)
	}
	return nil
}

// CreateBeerReply_ImageMultiError is an error wrapping multiple validation
// errors returned by CreateBeerReply_Image.ValidateAll() if the designated
// constraints aren't met.
type CreateBeerReply_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBeerReply_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBeerReply_ImageMultiError) AllErrors() []error { return m }

// CreateBeerReply_ImageValidationError is the validation error returned by
// CreateBeerReply_Image.Validate if the designated constraints aren't met.
type CreateBeerReply_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBeerReply_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBeerReply_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBeerReply_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBeerReply_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBeerReply_ImageValidationError) ErrorName() string {
	return "CreateBeerReply_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBeerReply_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBeerReply_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBeerReply_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBeerReply_ImageValidationError{}

// Validate checks the field values on GetBeerReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBeerReply_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBeerReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBeerReply_ImageMultiError, or nil if none found.
func (m *GetBeerReply_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBeerReply_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetBeerReply_ImageMultiError(errors)
	}
	return nil
}

// GetBeerReply_ImageMultiError is an error wrapping multiple validation errors
// returned by GetBeerReply_Image.ValidateAll() if the designated constraints
// aren't met.
type GetBeerReply_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBeerReply_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBeerReply_ImageMultiError) AllErrors() []error { return m }

// GetBeerReply_ImageValidationError is the validation error returned by
// GetBeerReply_Image.Validate if the designated constraints aren't met.
type GetBeerReply_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBeerReply_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBeerReply_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBeerReply_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBeerReply_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBeerReply_ImageValidationError) ErrorName() string {
	return "GetBeerReply_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e GetBeerReply_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBeerReply_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBeerReply_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBeerReply_ImageValidationError{}

// Validate checks the field values on UpdateBeerReq_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBeerReq_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBeerReq_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBeerReq_ImageMultiError, or nil if none found.
func (m *UpdateBeerReq_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBeerReq_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return UpdateBeerReq_ImageMultiError(errors)
	}
	return nil
}

// UpdateBeerReq_ImageMultiError is an error wrapping multiple validation
// errors returned by UpdateBeerReq_Image.ValidateAll() if the designated
// constraints aren't met.
type UpdateBeerReq_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBeerReq_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBeerReq_ImageMultiError) AllErrors() []error { return m }

// UpdateBeerReq_ImageValidationError is the validation error returned by
// UpdateBeerReq_Image.Validate if the designated constraints aren't met.
type UpdateBeerReq_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBeerReq_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBeerReq_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBeerReq_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBeerReq_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBeerReq_ImageValidationError) ErrorName() string {
	return "UpdateBeerReq_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBeerReq_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBeerReq_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBeerReq_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBeerReq_ImageValidationError{}

// Validate checks the field values on UpdateBeerReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBeerReply_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBeerReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBeerReply_ImageMultiError, or nil if none found.
func (m *UpdateBeerReply_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBeerReply_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return UpdateBeerReply_ImageMultiError(errors)
	}
	return nil
}

// UpdateBeerReply_ImageMultiError is an error wrapping multiple validation
// errors returned by UpdateBeerReply_Image.ValidateAll() if the designated
// constraints aren't met.
type UpdateBeerReply_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBeerReply_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBeerReply_ImageMultiError) AllErrors() []error { return m }

// UpdateBeerReply_ImageValidationError is the validation error returned by
// UpdateBeerReply_Image.Validate if the designated constraints aren't met.
type UpdateBeerReply_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBeerReply_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBeerReply_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBeerReply_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBeerReply_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBeerReply_ImageValidationError) ErrorName() string {
	return "UpdateBeerReply_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBeerReply_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBeerReply_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBeerReply_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBeerReply_ImageValidationError{}
